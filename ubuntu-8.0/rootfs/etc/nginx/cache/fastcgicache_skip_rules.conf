##
# Add few rules which deny using cache
##

# Don't skip cache by default
set $skip_cache 0;
set $skip_reason "";
# insert project specific cache rules to this file (delete this row when all projects are updated)
include /var/www/project/nginx/server/skip_cache.conf;
# insert project specific cache rules to this folder
include ${NGINX_INCLUDE_DIR}/skipcache/*.conf;

# POST requests and urls with a query string should always go to PHP
if ($request_method = POST) {
    set $skip_cache 1;
    set $skip_reason "${skip_reason}-POST";
}

# Deal with accepted query vars
set $without $query_string;

# Init the cache mode variable
set $cachemode "";

set_by_lua_block $cache_args {

    -- avoid race conditions from declaring global variables
    local split, esc
    local mode = os.getenv( 'NGINX_FASTCGI_CACHE_MODE' )

    if mode == nil then
        mode = "whitelist"
    end

    -- Helper split string function
    function split( inputstr, sep )
        if sep == nil then
                sep = "%s"
        end
        local t={}
        local i=1
        for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
                t[ i ] = str
                i = i + 1
        end
        return t
    end

    -- Helper escape special chars function
    function esc( str )
        return str:gsub( "([^%w])", "%%%1" )
    end

    ngx.var.cachemode = mode

    if mode == "whitelist" then
        local with    = {}
        local without = ngx.decode_args( ngx.unescape_uri( ngx.var.without ) )

        -- Get a list of accepted query vars from env variable
        local accepted = split( ( os.getenv( 'NGINX_FASTCGI_CACHE_QUERYVARS' ) or "" ), "," )

        -- Loop through the list
        for key, accept in pairs(accepted) do
            local decoded = tostring( without[ accept ] or "" )

            -- If there is a value present for the variable, store it in a variable
            if decoded ~= "" then
                table.insert( with, accept .. "=" .. decoded )
            end

            -- Remove the accepted key-value pair from the string
            without[ accept ] = nil
        end

        -- Get a list of ignored query vars from env variable
        local ignored = split( ( os.getenv( 'NGINX_FASTCGI_CACHE_QUERYVARS_IGNORE' ) or "" ), "," )

        for index, ignore in ipairs(ignored) do
            for key, val in pairs(without) do
                if key == ignore or key:match(ignore) then
                    without[key] = nil
                end
            end
        end

        -- Store all non-accepted query vars to be checked later
        ngx.var.without = ngx.encode_args( without )

        -- Return accepted query var key-value pairs to be used in the cache key
        return "?" .. table.concat( with, "&" )
    else
        -- Get a list of blacklisted query vars from env variable
        local blacklist = split( ( os.getenv( 'NGINX_FASTCGI_CACHE_QUERYVARS' ) or "" ), "," )
        local queryvars = ngx.decode_args( ngx.var.query_string or "" )

        ngx.var.without = ""

        for key, queryvar in pairs(blacklist) do
            if queryvars[ queryvar ] then
                ngx.var.skip_cache = 1
                ngx.var.skip_reason = ngx.var.skip_reason .. "-Lua"
                return
            end
        end
    end
}

# If there were any unaccepted query vars, skip cache
if ($without != "") {
    set $skip_cache 1;
    set $skip_reason "${skip_reason}-QueryString";
}

# Don't use the cache for logged in users or recent commenters
if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_sec|wordpress_logged_in|woocommerce_items_in_cart") {
    set $skip_cache 1;
    set $skip_reason "${skip_reason}-Cookie";
}

# Don't cache responses from wp-admin, xmlrpc and wp-login.php
if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php") {
    set $skip_cache 1;
    set $skip_reason "${skip_reason}-URI";
}