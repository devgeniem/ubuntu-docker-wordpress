##
# Add few rules which deny using cache
##

# Don't skip cache by default
set $skip_cache 0;
# insert project specific cache rules to this file (delete this row when all projects are updated)
include /var/www/project/nginx/server/skip_cache.conf;
# insert project specific cache rules to this folder
include ${NGINX_INCLUDE_DIR}/skipcache/*.conf;

# POST requests and urls with a query string should always go to PHP
if ($request_method = POST) {
    set $skip_cache 1;
}

# Deal with accepted query vars
set $without $query_string;

# Init the cache mode variable
set $cachemode "";

set_by_lua_block $cache_args {
    local mode = os.getenv( 'CACHE_MODE' )

    if mode == nil then
        mode = "whitelist"
    end

    -- Helper split string function
    function split( inputstr, sep )
        if sep == nil then
                sep = "%s"
        end
        local t={} ; i=1
        for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
                t[ i ] = str
                i = i + 1
        end
        return t
    end

    -- Helper escape special chars function
    function esc( str )
        return str:gsub( "([^%w])", "%%%1" )
    end

    ngx.var.cachemode = mode

    if mode == "whitelist" then
        local with = {}
        local without = ngx.var.without or ""

        -- Get a list of accepted query vars from env variable
        local accepted = split( ( os.getenv( 'CACHE_QUERYVARS' ) or "" ), "," )

        -- Loop through the list
        for key, accept in pairs(accepted) do
            -- If there is a value present for the variable, store it in a variable
            if ngx.decode_args( without )[ accept ] then
                if type( ngx.decode_args( without )[ accept ] ) == "string" then
                    table.insert( with, accept .. "=" .. ngx.decode_args( without )[ accept ] )
                    -- Remove the accepted key-value pair from the string
                    without = string.gsub( without, "&?" .. esc( accept ) .. "=[^&]+", "" )
                elseif type( ngx.decode_args( without )[ accept ] ) == "boolean" then
                    table.insert( with, accept .. "=true" )
                    -- Remove the accepted key-value pair from the string
                    without = string.gsub( without, "&?" .. esc( accept ), "" )
                end
            end
        end

        -- Store all non-accepted query vars to checked later
        ngx.var.without = without

        -- Return accepted query var key-value pairs to be used in the cache key
        if next(with) == nil then
            return "?" .. table.concat( with, "&" )
        end

    else
        -- Get a list of blacklisted query vars from env variable
        local blacklist = split( ( os.getenv( 'CACHE_QUERYVARS' ) or "" ), "," )
        local queryvars = ngx.decode_args( ngx.var.query_string or "" )

        ngx.var.without = ""

        for key, queryvar in pairs(blacklist) do
            if queryvars[ queryvar ] then
                ngx.var.skip_cache = 1
                return
            end
        end
    end
}

# If there were any unaccepted query vars, skip cache
if ($without != "") {
    set $skip_cache 1;
}

# Don't use the cache for logged in users or recent commenters
if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_sec|wordpress_logged_in|woocommerce_items_in_cart") {
    set $skip_cache 1;
}

# Don't cache responses from wp-admin, xmlrpc and wp-login.php
if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php") {
    set $skip_cache 1;
}