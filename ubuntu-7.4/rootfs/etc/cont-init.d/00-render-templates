#!/usr/bin/with-contenv bash
##
# This script uses clever heredoc hack to substitute env variables into static config files
# Source: http://stackoverflow.com/questions/2914220/bash-templating-how-to-build-configuration-files-from-templates-with-bash
##

##
# Replaces ${ENV} placoholders from file with provided variables
# $1 - ':'' separated list of variables
# $2 - filename to render
##
function render_env_tmpl() {
    vars=$1
    input_file=$2
    # If filename ends with .tmpl replace it without the .tmpl
    filename=$(dirname $input_file)/$(basename $input_file .tmpl)

    tmp_file=/tmp/$(basename $filename)

    # render all provided $vars to temporary file
    envsubst "$vars" < $input_file > $tmp_file

    # replace original file with rendered file
    mv $tmp_file $filename
}

echo "[cont-init.d] Substituting env into configuration files..."

##
# Nginx doesn't support env variables in config files so we will have to do this in hacky way instead
##
VARS='$PORT:$WEB_ROOT:$WEB_USER:$WEB_GROUP:$NGINX_ACCESS_LOG:$NGINX_ERROR_LOG:$NGINX_ERROR_LEVEL:$NGINX_INCLUDE_DIR:$NGINX_MAX_BODY_SIZE:$NGINX_BODY_BUFFER_SIZE:$NGINX_FASTCGI_TIMEOUT:$FASTCGI_INTERCEPT_ERRORS:$WP_ENV'
render_env_tmpl "$VARS" /etc/nginx/nginx.conf
render_env_tmpl "$VARS" /etc/nginx/fastcgi_settings.conf

##
# Redis cache needs to know the redis instance and credentials
##

# Set defaults if they are not set
export REDIS_HOST=${REDIS_HOST-$REDIS_1_PORT_6379_TCP_ADDR}
export REDIS_PORT=${REDIS_PORT-6379}
export REDIS_DATABASE=${REDIS_DATABASE-0}
export REDIS_PASSWORD=${REDIS_PASSWORD-''}
export REDIS_CACHE_TTL=${REDIS_CACHE_TTL-14400}

# Add helper variables for AWS s3 bucket storage
VARS+='$AWS_S3_BUCKET_NAME:AWS_S3_REPLICA_BUCKET_NAME'

# Add Redis variables
VARS+='$REDIS_HOST:$REDIS_PORT:$REDIS_DATABASE:$REDIS_PASSWORD'

# Add image proxy variables
VARS+='$GOOGLE_CLOUD_STORAGE_BUCKET_NAME'

# Add cache variables
VARS+='$NGINX_FASTCGI_CACHE_VALID:$NGINX_FASTCGI_CACHE_VALID_2:$NGINX_FASTCGI_CACHE_VALID_3:$NGINX_FASTCGI_CACHE_VALID_4:$NGINX_FASTCGI_CACHE_VALID_5:$NGINX_FASTCGI_CACHE_MAX_SIZE:$NGINX_FASTCGI_CACHE_INACTIVE:$NGINX_FASTCGI_CACHE_BACKGROUND_UPDATE:$NGINX_CACHE_USE_STALE:$NGINX_FASTCGI_CACHE_CONTROL:$NGINX_FASTCGI_CACHE_DIRECTORY:$NGINX_FASTCGI_CACHE_USE_STALE'


render_env_tmpl "$VARS" /etc/nginx/cache/helper_variables.conf
render_env_tmpl "$VARS" /etc/nginx/cache/fastcgicache_settings.conf
render_env_tmpl "$VARS" /etc/nginx/cache/fastcgicache_skip_rules.conf
render_env_tmpl "$VARS" /etc/nginx/cache/fastcgicache_headers.conf

##
# Render all user provided nginx templates
##
VARS+='$BASIC_AUTH_USER:$BASIC_AUTH_PASSWORD_HASH'
for conf_file in $(find $NGINX_INCLUDE_DIR -type f  -name '*.tmpl'); do
    echo "[cont-init.d] Rendering env in $conf_file..."

    # Add helper variables for easier scripting
    export __DIR__=$(dirname $conf_file)

    VARS_TMPL=$VARS':$__DIR__'
    render_env_tmpl "$VARS_TMPL" $conf_file
done

# Encrypt basic auth password if it set
if [ -z "$BASIC_AUTH_PASSWORD" ]; then
    echo "Not encrypting BASIC_AUTH_PASSWORD..."
else
    BASIC_AUTH_PASSWORD_HASH=$(openssl passwd -crypt $BASIC_AUTH_PASSWORD)
    echo "Encrypting BASIC_AUTH_PASSWORD... ${BASIC_AUTH_PASSWORD} -> ${BASIC_AUTH_PASSWORD_HASH}"
    echo "${BASIC_AUTH_USER}:${BASIC_AUTH_PASSWORD_HASH}" > /var/www/project/nginx/environments/${WP_ENV}/server/.htpasswd
fi
