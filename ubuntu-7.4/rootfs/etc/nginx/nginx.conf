# Default user and group for the nginx@index
user ${WEB_USER} ${WEB_GROUP};

# Default error log
error_log ${NGINX_ERROR_LOG} ${NGINX_ERROR_LEVEL};

# Write process id here
pid /var/run/nginx.pid;

# Load custom environment variables
include env.conf;

# How many worker threads to run;
# "auto" sets it to the number of CPU cores available in the system, and
# offers the best performance. Don't set it higher than the number of CPU
# cores if changing this parameter.

# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes auto;

# Maximum open file descriptors per process;
# should be > worker_connections.
worker_rlimit_nofile 8192;

events {
  # When you need > 8000 * cpu_cores connections, you start optimizing your OS,
  # and this is probably the point at which you hire people who are smarter than
  # you, as this is *a lot* of requests.
  worker_connections 8000;
}

http {

  # Configure hashmaps so that environment does not change defaults
  map_hash_max_size 262144;
  map_hash_bucket_size 128;
  server_names_hash_bucket_size 64;

  # Hide nginx version information.
  server_tokens off;

  # Get the request uri without the query string to its own variable
  map $request_uri $request_uri_path {
    "~^(?P<path>[^?]*)(\?.*)?$" $path;
  }

  #Enable Fastcgicache
  include cache/fastcgicache_settings.conf;

  # Remove Server header entirely
  more_clear_headers Server;

  # How long to allow each connection to stay idle; longer values are better
  # for each individual client, particularly for SSL, but means that worker
  # connections are tied up longer. (Default: 65)
  keepalive_timeout 20;

  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write().
  sendfile        on;

  # Tell Nginx not to send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out. (adds TCP_CORK)
  tcp_nopush      on;

  # Gzip all the assets
  include gzip.conf;

  # Add default pagespeed settings
  include pagespeed/settings.conf;

  # Add all default mime types and additional ones
  include    additional.types;
  include    mime.types;

  default_type application/octet-stream;

  client_body_temp_path /tmp/nginx/body 1 2;
  fastcgi_temp_path /tmp/nginx/fastcgi_temp 1 2;

  # Include custom log formats
  include log_formats.conf;

  # Allow bigger default file uploads
  client_max_body_size ${NGINX_MAX_BODY_SIZE};

  # Allow bigger body buffer size in memory
  client_body_buffer_size ${NGINX_BODY_BUFFER_SIZE};

  # Include custom nginx http additions from project
  include ${NGINX_INCLUDE_DIR}/http/*.conf;
  include ${NGINX_INCLUDE_DIR}/environments/${WP_ENV}/http/*.conf;

  # load upstreams from one file which can be overwritten depending on situation
  include upstreams.conf;

  # Add few headers which make XSS harder
  include security_headers.conf;

  # Add headers from project
  include ${NGINX_INCLUDE_DIR}/headers/*.conf;

  # Include cache headers
  include cache/fastcgicache_headers.conf;

  # If ${PORT} != 80 means that we are behind reverse proxy as well
  # This directive helps that we don't redirect clients into mysite.com:8080/resource type urls
  port_in_redirect off;

  # Use theme assets straight from corresponding files for pagespeed
  pagespeed ProcessScriptVariables on;
  pagespeed LoadFromFile "$scheme://$host/app/themes/" "${WEB_ROOT}/app/themes/";
  pagespeed LoadFromFile "$scheme://$host/wp-content/themes/" "${WEB_ROOT}/wp/wp-content/themes/";

  server {
        # This is the default server for this container
        listen ${PORT} default_server;
        server_name _;

        # Init the cache mode variable
        set $cachemode "";

        # Set default cache skip reason
        set $skip_reason "";

        root ${WEB_ROOT};

        # Use index.php if it exists but also allow static websites in subfolders
        index index.php index.html;

        access_log ${NGINX_ACCESS_LOG} custom;

        # Blocked log file
        set $blocked_log /dev/stdout;

        disable_symlinks off;

        ## state variable must be set as it will crash nginx if logged in cache is not used
        set $state '';

        # Include custom nginx server additions from project
        include ${NGINX_INCLUDE_DIR}/server/*.conf;
        include ${NGINX_INCLUDE_DIR}/environments/${WP_ENV}/server/*.conf;

        set $custom_parameters "";

        # Include custom cache confs
        include ${NGINX_INCLUDE_DIR}/cache/*.conf;

        # Moved the cache key defining variable here so it can be altered by project
        fastcgi_cache_key $scheme$request_method$host$uri$cache_args$custom_parameters$state;

        # These variables are proxy conscious, so that they work even though we are behind reverse proxy
        include proxy_real_variables.conf;

        # Include custom error pages
        include error_pages.conf;

        # Own handling for WP-activate that for some very odd reason serves itself as 404.
        location = /wp-activate.php {
            try_files /wp/$uri @index;

            include fastcgi_settings.conf;

            # Append subfolder automatically
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

            # Give sane max execution time to frontend
            fastcgi_read_timeout 30;
            fastcgi_pass php-fpm;
        }

        location = /robots.txt {
            if ( $host ~ gpilvi\.com|geniem\.io ) {
                add_header Content-Type text/plain;
                return 200 "User-agent: *\nDisallow: /\n";
            }

            allow all;
            log_not_found off;
            access_log off;
            try_files $uri @index;
        }

        location = /favicon.ico {
            allow all;
            log_not_found off;
            access_log off;
            try_files $uri =404;
        }

        # deny all dot-files including git
        location ~ /\. {
            deny all;
            log_not_found off;
            access_log off;
        }

        location / {
            try_files $uri $uri/ /wp/$uri /wp/$uri/ @index;
        }

        # Deny requesting .dust files from anywhere else in the theme than under the partials/public directory
        location ~* \/themes\/[^\/]+\/partials\/public\/.*\.dust$ {
            allow all;
        }

        location ~* \/themes\/.*\.dust$ {
            deny all;
        }

        # Static files
        location ~* \.(css|js|jpe?g|gif|ico|png|otf|ttf|eot|woff?2|svg|webp)$ {

            ## Deny overriding Pagespeed
            if ($arg_pagespeed != '') {  access_log $blocked_log blocked; return 403; }
            if ($arg_pagespeedspeedfilters != '') {  access_log $blocked_log blocked; return 403; }

            include static_files.conf;

            # These files are probably exactly like $uri says but also try from /wp/
            try_files $uri /wp/$uri @index;

            # Deny requesting plain style.css from theme root directory
            location ~ ^.*/themes/[^/]+/style\.css {

                # Preserve this url
                pagespeed CssPreserveUrls true;

                # Minify and remove comments from css
                pagespeed EnableFilters rewrite_css;

                # Wait that nginx has prepared the file
                pagespeed InPlaceWaitForOptimized on;

                # Don't ever try to load non modified style.css
                pagespeed InPlaceRewriteDeadlineMs 100000000;

                # Don't allow overriding pagespeed with pagespeed fixed urls
                # Source: https://github.com/pagespeed/ngx_pagespeed/issues/1306
                location ~ ^(.*)/themes/([^/]+)/style.*pagespeed.* {
                    return 301 $1/themes/$2/style.css;
                }
            }

            ##
            # Static WordPress files ~ wp-*
            # These files are probably in /wp/ subfolder but also try from  $uri
            ##
            location ~ ^wp- {
                try_files /wp/$uri $uri @index;
            }
        }

        # App folder contains our plugins and themes
        # We want to server assets from here but deny all php execution
        location /app/ {
            try_files $uri @index;

            ##
            # Deny access into php files under /app/
            ##
            location ~ \.php$ {
                access_log $blocked_log blocked;
                deny all;
            }
        }

        ##
        # Run all php files from wp subfolder
        # This is how wordpress is supposed to be run
        # It also prevents direct access to possibly insecure code inside our plugins
        ##
        location ~ \.php$ {
            try_files /wp/$uri @index;

            include fastcgi_settings.conf;

            # Append subfolder automatically
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

            # Handover 404 errors from php-fpm to WordPress
            error_page 404 = @index;

            # Give sane max execution time to frontend
            fastcgi_read_timeout ${NGINX_FASTCGI_TIMEOUT};
            fastcgi_pass php-fpm;

            ## Deny access to all php files in uploads folders
            location ~* ^/uploads { access_log $blocked_log blocked; deny all; }
            location ~* ^/content/uploads { access_log $blocked_log blocked; deny all; }
            location ~* ^/wp-content/uploads { access_log $blocked_log blocked; deny all; }

            ## Fix Full Path Disclosures if display_errors is on
            ## Don't allow straight access into core wp-includes
            location ~* ^/wp-includes { access_log $blocked_log blocked; deny all; }
        }
        # Create purge location to empty fullpage cache
        location ~ /purge(/.*) {
            fastcgi_cache_purge WORDPRESS "$scheme$request_method$host$1";
        }
        # Create health location for contena healthcheck
        location /__health {
            access_log off;
            return 200;
        }

        # Include redis interfaces /redis-fetch & /redis-store
        # include cache/redis_backend.conf;

        location @index {

            # Include custom nginx index additions from project
            include ${NGINX_INCLUDE_DIR}/index/*.conf;
            include ${NGINX_INCLUDE_DIR}/environments/${WP_ENV}/index/*.conf;

            ## Deny overriding Pagespeed
            if ($arg_pagespeed != '') {  access_log $blocked_log blocked; return 403; }
            if ($arg_pagespeedspeedfilters != '') {  access_log $blocked_log blocked; return 403; }

            # Use redis as proxy cache
            #include cache/srcache.conf;
            # Use fastcgi cache
            include cache/fastcgicache.conf;

            # Fallback into php
            include fastcgi_settings.conf;
            fastcgi_param SCRIPT_FILENAME $document_root/index.php;

            # Give sane max execution time to frontend
            fastcgi_read_timeout ${NGINX_FASTCGI_TIMEOUT};
            fastcgi_pass php-fpm;
        }

        # WordPress is stupid
        location = /wp-admin { rewrite ^ /wp-admin/ permanent; }

        location = / {

            ## Block hackers from enumerating users
            if ( $arg_author ~ [0-9]+ ) { access_log $blocked_log blocked; return 403; }

            ## Deny overriding Pagespeed
            if ($arg_pagespeed != '') {  access_log $blocked_log blocked; return 403; }
            if ($arg_pagespeedspeedfilters != '') {  access_log $blocked_log blocked; return 403; }

            # Use redis as proxy cache
            #include cache/srcache.conf;
            # Use fastcgi cache
            include cache/fastcgicache.conf;

            #Enable project spesific config to root block
            include ${NGINX_INCLUDE_DIR}/environments/${WP_ENV}/root/*.conf;

            # Fallback into php
            include fastcgi_settings.conf;
            fastcgi_param SCRIPT_FILENAME $document_root/index.php;

            # Give sane max execution time to frontend
            fastcgi_read_timeout ${NGINX_FASTCGI_TIMEOUT};
            fastcgi_pass php-fpm;
        }

        # Prevent /wp/wp/wp/... rewrite loops
        location ^~ /wp/ {
            rewrite ^/wp/(.*)$ $1$is_args$args last;
        }

        # Block some vulnerabilities always
        include security.conf;

        # Include basic pagespeed locations like beacons
        include pagespeed/locations.conf;
    }
    include ${NGINX_INCLUDE_DIR}/environments/${WP_ENV}/end/*.conf;
}
